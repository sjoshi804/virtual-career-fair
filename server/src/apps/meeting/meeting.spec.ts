import { expect, request } from 'chai';
import 'mocha';
import server from '../..';
import { Applicant } from '../user/applicant';
import { Recruiter } from '../user/recruiter';
import { Meeting } from './meeting';
import { MeetingNotes } from './meetingNotes';
import chaiHttp = require('chai-http');

// To use test HTTP API
chai.use(chaiHttp);

// Test Meeting class
describe('Meeting', () => {

    it('constructor', () => {
        expect(new Meeting(new Recruiter("", "", "", ""), new Applicant("", "", "", ""), "", "")).to.be.an.instanceOf(Meeting);
    });

    it('getLink - should get link created for meeting by WebRTCAdapter', () => {
        // add more to this test when there are some constraints on what type of link is generated by WebRTCAdapter
        expect(new Meeting(new Recruiter("", "", "", ""), new Applicant("", "", "", ""), "", "").getLink());
    });
});

// Test MeetingNotes
describe('MeetingNotes', () => {

    it('constructor', () => {
        expect(new MeetingNotes("", "", "", "", "")).to.be.an.instanceOf(MeetingNotes);
    });

    it('serialize - returns itself', () => {
        expect((new MeetingNotes("", "", "", "", "")).serialize()).to.be.an.instanceOf(MeetingNotes);
    });
});

// Test MeetingNotes API
describe('MeetingNotes API (/meetingNotes)', () => {

    before()
    const prefix = "/meetingNotes"
    it('POST / - creates new note', (done) => 
    {
        request(server).post(prefix + "/")
            .then(
                res => 
                {
                    expect(res.body.sucesss).to.be.true;
                    expect(MeetingNotes.db.count({})).to.equal(1);
                }
            )
            .then(() => done(), done);
    });

    it('GET /company/:companyId - gets all meeting notes for a company ', (done) => 
    {
        request(server).post(prefix + "/")
            .then(
                res => 
                {
                    expect(res.body.sucesss).to.be.true;
                    expect(MeetingNotes.db.count({})).to.equal(1);
                }
            )
            .then(() => done(), done);
    });

    it('GET /company/:companyId/applicant/:applicantId - gets all notes for company on a given applicant', (done) => 
    {
        request(server).post(prefix + "/")
            .then(
                res => 
                {
                    expect(res.body.sucesss).to.be.true;
                    expect(MeetingNotes.db.count({})).to.equal(1);
                }
            )
            .then(() => done(), done);
    });

    it('GET /company/:companyId/careerFair/:careerFairId - gets all notes for company from a given career fair', (done) => 
    {
        request(server).post(prefix + "/")
            .then(
                res => 
                {
                    expect(res.body.sucesss).to.be.true;
                    expect(MeetingNotes.db.count({})).to.equal(1);
                }
            )
            .then(() => done(), done);
    });

    it('GET /company/:companyId/careerfair/:careerFairId/applicant/:applicantId', (done) => 
    {
        request(server).post(prefix + "/")
            .then(
                res => 
                {
                    expect(res.body.sucesss).to.be.true;
                    expect(MeetingNotes.db.count({})).to.equal(1);
                }
            )
            .then(() => done(), done);
    });

    it('UPDATE /company/:companyId/careerfair/:careerFairId/applicant/:applicantId', (done) => 
    {
        request(server).post(prefix + "/")
            .then(
                res => 
                {
                    expect(res.body.sucesss).to.be.true;
                    expect(MeetingNotes.db.count({})).to.equal(1);
                }
            )
            .then(() => done(), done);
    });

    it('DELETE /company/:companyId/careerfair/:careerFairId/applicant/:applicantId', (done) => 
    {
        request(server).post(prefix + "/")
            .then(
                res => 
                {
                    expect(res.body.sucesss).to.be.true;
                    expect(MeetingNotes.db.count({})).to.equal(1);
                }
            )
            .then(() => done(), done);
    });
});